@use "sass:math";

$gutter-width: 8px;
$gutter-width-md: 15px;
$gutter-width-sm: 6px;
$container-max-width: 1320px;

.grid {
  width: 100%;
  display: block;
  padding: 0;

  &.wide {
    max-width: $container-max-width;
    margin: 0 auto;
  }
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: calc(-1 * #{$gutter-width} / 2);
  margin-right: calc(-1 * #{$gutter-width} / 2);

  &.no-gutters {
    margin-left: 0;
    margin-right: 0;
  }

  &.sm-gutter {
    margin-left: calc(-1 * #{$gutter-width-sm});
    margin-right: calc(-1 * #{$gutter-width-sm});
  }
}

.col {
  padding-left: calc(#{$gutter-width} / 2);
  padding-right: calc(#{$gutter-width} / 2);

  .row.no-gutters & {
    padding-left: 0;
    padding-right: 0;
  }

  .row.sm-gutter & {
    padding-left: calc(#{$gutter-width-sm});
    padding-right: calc(#{$gutter-width-sm});
  }
}

@mixin column($size) {
  flex: 0 0 $size;
  max-width: $size;
}

@mixin offset($size) {
  margin-left: $size;
}

@mixin display-none {
  display: none;
}

@mixin display-block {
  display: block;
}

@mixin responsive-column($prefix, $start, $end) {
  @for $i from $start through $end {
    .#{$prefix}-#{$i} {
      @include column(math.div($i * 100%, 12));
    }

    .#{$prefix}-o-#{$i} {
      @include offset(math.div($i * 100%, 12));
    }
  }
}

.c-0 {
  @include display-none;
}
@include responsive-column("c", 1, 12);

@media (min-width: 740px) {
  $gutter-width: 16px;

  .row {
    margin-left: calc(-1 * #{$gutter-width} / 2);
    margin-right: calc(-1 * #{$gutter-width} / 2);
  }

  .col {
    padding-left: calc(#{$gutter-width} / 2);
    padding-right: calc(#{$gutter-width} / 2);
  }

  .t-0 {
    @include display-none;
  }

  @for $i from 1 through 12 {
    .t-#{$i} {
      @include display-block;
    }
  }

  @include responsive-column("t", 1, 12);
}

@media (min-width: 1113px) {
  $gutter-width: $gutter-width-md;

  .row {
    margin-left: calc(-1 * #{$gutter-width} / 2);
    margin-right: calc(-1 * #{$gutter-width} / 2);

    &.sm-gutter {
      margin-left: calc(-1 * #{$gutter-width-sm});
      margin-right: calc(-1 * #{$gutter-width-sm});
    }
  }

  .col {
    padding-left: calc(#{$gutter-width} / 2);
    padding-right: calc(#{$gutter-width} / 2);

    .row.sm-gutter & {
      padding-left: calc(#{$gutter-width-sm});
      padding-right: calc(#{$gutter-width-sm});
    }
  }

  .l-0 {
    @include display-none;
  }

  @for $i from 1 through 12 {
    @if $i == 2 {
      // Xử lý cho lớp .l-2-4
      .l-#{$i},
      .l-#{$i}-4 {
        display: block;
      }
    } @else {
      // Xử lý cho các lớp còn lại từ .l-1 đến .l-12
      .l-#{$i} {
        display: block;
      }
    }
  }

  @include responsive-column("l", 1, 12);

  .l-2-4 {
    @include column(20%);
  }
}

@media (min-width: 740px) and (max-width: 1023px) {
  .wide {
    width: 644px;
  }
}

@media (min-width: 1024px) and (max-width: 1239px) {
  .wide {
    width: 984px;

    .row {
      margin-left: calc(-1 * #{$gutter-width} / 2);
      margin-right: calc(-1 * #{$gutter-width} / 2);

      &.sm-gutter {
        margin-left: calc(-1 * #{$gutter-width-sm});
        margin-right: calc(-1 * #{$gutter-width-sm});
      }
    }

    .col {
      padding-left: calc(#{$gutter-width} / 2);
      padding-right: calc(#{$gutter-width} / 2);

      .row.sm-gutter & {
        padding-left: calc(#{$gutter-width-sm});
        padding-right: calc(#{$gutter-width-sm});
      }
    }

    .l-0 {
      @include display-none;
    }
    @include responsive-column("l", 1, 12);

    .l-2-4 {
      @include column(20%);
    }
  }
  @for $i from 1 through 12 {
    @if $i == 2 {
      // Xử lý cho lớp .l-2-4
      .l-#{$i},
      .l-#{$i}-4 {
        display: block;
      }
    } @else {
      // Xử lý cho các lớp còn lại từ .l-1 đến .l-12
      .l-#{$i} {
        display: block;
      }
    }
  }
}
